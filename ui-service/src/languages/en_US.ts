import {DebitCredit} from "interfaces/bankingConfiguration";

export const en_US = {
  translation: {
    analysisTable: {
      annualized: "Annualized",
      circularOrOthers: "Circular/Others",
      interfirm: "Interfirm",
      interstate: "Interstate",
      monthlyTO: "Monthly TO",
      netTotal: "Net Total",
      totalNumberOfMonths: "Total Number of Months",
    },
    bankAccountDetails: {
      columns: {
        accHoldername: "Name",
        bankAccNo: "Account No.",
        bankName: "Bank Name",
        consolidate: "Consolidate",
        srNo: "Sr. No.",
        yearMonthFrom: "From Date",
        yearMonthTo: "To Date",
      },
    },
    bankStatementTable: {
      alert: {
        errorWhileUpdating: "Error while updating",
        statementUpdatedSuccessfully: "Statement updated successfully",
      },
      bankStatement: "Bank Statement",
      columns: {
        ccUtilization: "CC Utilization (in %)",
        credit: "Credit",
        creditInterBank: "Credit Inter Bank",
        creditInterFirm: "Credit Inter Firm",
        creditNonBusinessTransaction: "Credit Non business Transaction",
        debit: "Debit",
        debitInterBank: "Debit Inter Bank",
        debitInterFirm: "Debit Inter Firm",
        debitNonBusinessTransaction: "Debit Non business Transaction",
        payments: "Payments",
        iwReturn: "I/W Return",
        loanReceipts: "Loan Receipts",
        owReturn: "O/W Return",
        particulars: "Particulars",
        penalMABCharges: "Penal/MAB Charges",
        quarterlyTurnover: "Quarterly Banking Turnover",
        srNo: "Sr. No.",
      },
      consolidatedStatements: "Consolidated Statements",
      individualStatements: "Individual Statements",
      rows: {
        averageBankingBalance: "Average EOD Balance",
        loanReceiptsPayments: "Loan Receipts - Payments",
        medianBankingBalance: "Median EOD Balance",
        monthlyAverage: "Monthly Average",
        nameOfBank: "Name of Bank",
        netBanking: "Net Banking",
        total: "Total",
        totalInterBank: "Total Interbank",
        totalInterfirm: "Total Interfirm",
        totalNonBusinessTransaction: "Total Non Business Transation",
      },
      submit: "Submit",
      download: "Download Excel",
      transactions: "Transactions",
    },
    bankTxnTable: {
      alert: {
        errorWhileUpdating: "Error while updating",
        transactionUpdatedSuccessfully: "Transaction updated successfully",
      },
      columns: {
        accNo: "Acc No",
        balance: "Balance",
        bank: "Bank",
        category: "Category",
        chequeNo: "Cheque No",
        comment: "Comment",
        credit: "Credit",
        date: "Txn Date",
        debit: "Debit",
        description: "Description",
        identifiedCategory: "Identified Category",
        parties: "Parties/Merchant",
        srNo: "Sr No",
        transactionFlag: "Transaction Flag",
        transactionType: "Transaction type",
      },
      [DebitCredit.CREDIT]: "Credit",
      customerFilter: {
        between: "Between",
        from: "From",
        to: "To",
      },
      [DebitCredit.DEBIT]: "Debit",
      [DebitCredit.BOTH]: "Both",
      na: "N/A",
      statementDuration: "Statement duration",
      total: "Total",
      totalTransactions: "Total Transactions",
    },
    cibil: {
      age: "AGE",
      applicant: "APPLICANT",
      borrowingDetails: {
        borrowingDetails: "Borrowing Details",
        columns: {
          actions: "Actions",
          addInTotal: "Add in Total",
          bankNbfc: "Bank/NBFC",
          cancelLabel: "Cancel",
          comment: "Comment",
          delayInMonths: "Delay in months(last 12)",
          duplicate: "Duplicate",
          editLabel: "Edit",
          emi: "EMI",
          emiSystem: "EMI(SYSTEM)",
          interestRate: "Interest Rate",
          last12MonthsDPD: "Last 12 months DPD",
          outstandingAmount: "Outstanding",
          overallDPD: "Overall DPD",
          overdue: "Overdue",
          ownership: "Ownership",
          reportedDate: "Reported Date",
          sanctionedAmount: "Sanctioned Amount",
          sanctionedDate: "Sanctioned Date",
          saveLabel: "Save",
          status: "Status",
          suitFiledStatus: "Suit Filed",
          tenure: "Tenure",
          typeOfLoan: "Type of Loan",
        },
        notification: {
          rowUpdateFailure: "Error whille updating borrowing details entry.",
          rowUpdateSuccess: "Borrowing Details entry updated successfully.",
        },
      },
      cibilDetails: "Cibil Details",
      controlNo: "CONTROL NO.",
      creditFacilityStatus: "Credit Facility Status",
      inquiries: {
        columns: {
          accountsOpened: "Accounts opened",
          inquiries: "Inquiries",
          particulars: "Particulars",
        },
        inquiries: "Inquiries",
      },
      loanInformation: {
        columns: {
          particulars: "Particulars",
          totalAccounts: "Total Accounts",
        },
        loanInformation: "Loan Information",
        rows: {
          dpdRange0: "0",
          dpdRange1to30: "1-30",
          dpdRange31to90: "31-90",
          dpdRangeGreaterThan90: ">90",
          reportedAccounts: "RA",
          numberOfClosedLoansAsOnDate: "Number of Closed loans as on date",
          numberOfLiveLoans: "Number of live loans",
          numberOfLoansOpenedSinceInception: "Number of loans opened since inception",
          overdueAmountInLiveLoans: "Overdue amount in Live Loans",
          posOfLiveLoans: "POS of Live Loans",
          sanctionedAmountOfLiveLoans: "Sanctioned amount of Live Loans",
          total: "Total",
          totalAccountsWithDPD: "Total accounts with DPD",
        },
      },
      newLoanEntryTable: {
        addBorrowingEntries: "Add Borrowing Entries",
        addNewRecord: "Add record",
        columns: {
          actions: "Actions",
          addInTotal: "Add in Total",
          bankNbfc: "Bank/NBFC",
          cancelLabel: "Cancel",
          comment: "Comment",
          delayInMonths: "Delay in months(last 12)",
          duplicate: "Duplicate",
          editLabel: "Edit",
          emi: "EMI",
          interestRate: "Interest Rate",
          last12MonthsDPD: "Last 12 months DPD",
          lastPaymentDate: "Last Payment Date",
          outstanding: "Outstanding",
          overallDPD: "Overall DPD",
          overdue: "Overdue",
          ownership: "Ownership",
          reportedDate: "Reported Date",
          sanctionedAmount: "Sanctioned Amount",
          sanctionedDate: "Sanctioned Date",
          saveLabel: "Save",
          status: "Cibil Status",
          tenure: "Tenure",
          typeOfLoan: "Type of Loan",
        },
        notification: {
          rowDeleteFailure: "Error whille updating new loan entry.",
          rowDeleteSuccess: "New loan entry updated successfully.",
          rowSaveFailure: "Error whille updating new loan entry entry.",
          rowSaveSuccess: "Borrowing Details entry saved successfully.",
          rowUpdateFailure: "Error whille updating new loan entry.",
          rowUpdateSuccess: "Borrowing Details entry updated successfully.",
          rowValidationDateInvalidFailure: "Last payment date should be after santioned date",
          rowValidationMandatoryFieldsFailure: "Santioned date, Type of null and Santioned amount cannot be null.",
        },
      },
      personalDetails: {
        columns: {
          address: {
            address: "Address",
            category: "Category",
            dateReported: "Date reported",
          },
          consumerInformation: {
            dob: "DOB",
            gender: "gender",
            heading: "Consumer Information",
            name: "Name",
          },
          detailsAsPerBureau: "Details as per Bureau",
          detailsInputtedLOS: "Details inputted in LOS",
          particulars: "Particulars",
        },
        personalDetails: "Personal Details",
      },
      score: "SCORE",
      suitFiledWilfulDefault: "Suit Filed / Wilful Default",
      totalOutstanding: "Total Outstanding: ",
      totalSanctioned: "Total Sanctioned: ",
      emi: "Total EMI: ",
      emiSystem: "EMI(System)",
      writtenOffAmtPrincipal: "Written-off Amount (Principal)",
    },
    configureMasterIdentifiers: {
      addRecord: "Add record",
      alert: {
        errorWhileDeleting: "Error while deleting",
        errorWhileSaving: "Error while saving",
        errorWhileUpdating: "Error while updating",
        rowDeletedSuccessfully: "Row deleted successfully",
        rowSavedSuccessfully: "Row saved successfully",
        rowUpdatedSuccessfully: "Row updated successfully",
      },
      cancelLabel: "Cancel",
      columns: {
        actions: "Actions",
        category: "Category",
        debitCredit: "Debit/Credit",
        identificationValue: "Identification value",
        partiesMerchant: "Parties Or Merchants",
        transactionType: "Transaction Type",
      },
      deleteLabel: "Delete",
      editLabel: "Edit",
      masterRules: "Master rules",
      saveLabel: "Save",
    },
    configureTxnFlag: {
      addRecord: "Add record",
      alert: {
        errorWhileDeleting: "Error while deleting",
        errorWhileUpdating: "Error while updating",
        rowDeletedSuccessfully: "Row deleted successfully",
        rowUpdatedSuccessfully: "Row updated successfully",
      },
      cancelLabel: "Cancel",
      category: "Category",
      columns: {
        actions: "Actions",
        categoryList: "Category",
        connector: "Connector",
        debitOrCredit: "Debit/Credit",
        identificationValue: "Identification Value",
        partiesOrMerchantList: "Parties/Merchant",
        ruleQuery: "Rule Expression",
        transactionFlag: "Transaction flag",
        transactionType: "Transaction type",
      },
      deleteLabel: "Delete",
      editLabel: "Edit",
      expressionError: "Invalid expression! Matching Parentheses not found.",
      masterRules: "Master rules",
      partiesMerchant: "Parties/Merchant",
      saveLabel: "Save",
      transactionType: "Transaction",
    },
    errorPage: {
      badRequest: "Unable to get the requested data. The possible issues could be: ",
      badRequestHeader: "400 | Bad Request",
      errorMessageNotFound: "Could not find the requested data. The possible issues could be: ",
      errorMessageNotFoundHeader: "404 | Not Found",
      invalidUrl: "Invalid url. Kindly enter correct url.",
      reportDetailsIncorrect: "The report does not exist for the requested entities.",
      reportNotReadyForEntity: "The requested entity details are incorrect.",
    },
    gstDetails: {
      columns: {
        consolidate: "Consolidate",
        detailFor: "Detail For",
        gstNo: "GST No.",
        legalName: "Legal Name",
        srNo: "Sr. No.",
        status: "Status",
        tradeName: "Trade Name",
      },
      displayConsolidatedReport: "Display Consolidated Report",
      displayIndividualReports: "Display Individual Reports",
    },
    gstinDetails: {
      consolidatedReport: "Consolidated Report",
      corpositoryConsolidatedReport: "Corpository Consolidated Report",
      header: "GST Details",
      individualReports: "Individual Reports",
      profileDetails: "Profile Details",
      salesAsPerGstr3b: "Sales as per GSTR-3B",
    },
    home: {
      fileUpload: {
        clientOrderId: "Client Order ID",
        entityId: "Entity ID",
        error: {
          fileRequired: "Please upload one Excel report file",
          inputRequired: "Please specify Client Order ID or Entity ID",
        },
        parseInProgress: "Report uploaded. Parsing...",
        success: "Report parsed successfully",
        successClientOrderId: "Report parsed successfully for Client Order ID {{cOId}}",
        successEntityId: "Report parsed successfully for Entity ID {{eId}}",
        successEntityIdClientOrderId: "Report parsed successfully for Client Order ID {{cOId}} and Entity ID {{eId}}",
        title: "Upload Consolidated GST Excel Report",
        upload: "Upload",
        uploadLabel: "Upload Consolidated GST Excel Report File",
      },
      requestHistory: {
        column: {
          clientOrderId: "Client Order ID(s)",
          companyName: "Company Name",
          entityId: "Entity ID",
          srNo: "Sr. No.",
          view: "View",
        },
        title: "Last 5 Get GST Report Requests",
      },
    },
    login: {
      header: "MAS MFS Login",
      invalidCredentials: "Invalid Credentials",
      login: "Login",
      noAccessTokenProvided: "No or invalid access token was provided with iframe.",
      password: "Password",
      username: "Username",
    },
    particularsTable: {
      amount: "Amount",
      columns: {
        add: "Add",
        asPerBanking: "As per Banking",
        asPerGst: "As per GST",
        asPerGSTPercent: "As per GST (%)",
        topCustomers: "Top Customers",
        topSuppliers: "Top Suppliers",
      },
      customers: "Customers",
      suppliers: "Suppliers",
      total: "Total",
    },
    salesTable: {
      alert: {
        errorWhileUpdating: "Error while updating",
        reportUpdatedSuccessfully: "Report updated successfully",
      },
      averageDelayInDays: "Average Delay in Days",
      delayInDays: "Delay in Days",
      delayInFiling: "Delay in Filing",
      gst3bSalesExcludingGst: "GSTR-3B Sales (Excluding GST)",
      month: "Month",
      no: "No",
      noFiling: "-",
      particulars: "Particulars",
      purchaseExcludingGst: "Purchase (Excluding GST)",
      saveNumericEntries: "Save Numeric Entries",
      srNo: "Sr. No.",
      total: "Total",
      totalLast6Month : "Total (Last 6 Month)",
      totalFirst6Month : "Total (First 6 Month)",
      yes: "Yes",
    },
  },
};